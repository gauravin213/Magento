<?php 
namespace Clag\Customlogin\Controller\Customer;  
       
use Magento\Framework\Controller\ResultFactory;   

class Saveforlatteraction extends \Magento\Framework\App\Action\Action 
{ 

    public function __construct
    (
        \Magento\Framework\App\Action\Context $context,
        \Magento\Customer\Model\Session $customerSession,
        \Magento\Checkout\Model\Cart $cartModel,
        \Magento\Store\Model\StoreManagerInterface $storeManagerInterface,
        \Magento\Framework\ObjectManagerInterface $objectmanager,
        \Clag\Customlogin\Model\SaveforlatteritemFactory $saveforlatteritemFactory,
        \Clag\Customlogin\Model\SaveforlatteritemoptionFactory $saveforlatteritemoptionFactory,
        \Magento\Framework\Stdlib\DateTime\DateTime $date,
        array $data = []
    ) 
    {   
        $this->customerSession = $customerSession;
        $this->_cartModel = $cartModel;
        $this->_storeManagerInterface = $storeManagerInterface;
        $this->_objectManager = $objectmanager;
        $this->_saveforlatteritemFactory = $saveforlatteritemFactory;
        $this->_saveforlatteritemoptionFactory = $saveforlatteritemoptionFactory;
        $this->date = $date;
        parent::__construct($context, $data);
    }


    public function execute()
    {
        $ParamsData = $this->getRequest()->getParams(); 

        $storeId = $this->_storeManagerInterface->getStore()->getId();

        $quoteItemCollection = $this->_objectManager->create(\Magento\Quote\Model\ResourceModel\Quote\Item\Collection::class);

        $quote = $this->_cartModel->getQuote();

        $quote->setStoreId($storeId);

        $quoteItemCollection
            ->setQuote($quote)
            ->addFieldToFilter('product_id', $ParamsData['productId']); //51, 41, 


        if (count($quoteItemCollection->getData()) == 0) 
        {
            $response = $this->resultFactory
                ->create(\Magento\Framework\Controller\ResultFactory::TYPE_JSON)
                ->setData(['result' => 0]);
            return $response;
        } 
        else 
        {
            $newItem = $quoteItemCollection->getFirstItem();

            $jasonDecodeArray = array();


            $optionArrayData = array();
            foreach ($newItem->getOptions() as $option) {

                $optionArrayData[] = $option->getData();

                $jasonDecodeArray[] = json_decode($option['value']);
            }  

            $uenc = $jasonDecodeArray[0]->uenc; 

            $product = $jasonDecodeArray[0]->product; 

            $selected_configurable_option = $jasonDecodeArray[0]->selected_configurable_option; 

            $related_product = $jasonDecodeArray[0]->related_product; 

            $super_attribute = "";
            if (!empty($jasonDecodeArray[0]->selected_configurable_option)) {
               $super_attribute = $jasonDecodeArray[0]->super_attribute; 
    
            }
            else 
            {
               $super_attribute = "";
            }

            $qty = $jasonDecodeArray[0]->qty; 

            $customerId = $this->customerSession->getCustomer()->getId();

            $date = $this->date->gmtDate();

            /**********************************************/
            //Save data
            $items = $this->_saveforlatteritemFactory->create();
            $collection = $items;
            $collection->setCustomerId($customerId);
            $collection->setProductId($product);
            $collection->setStoreId($storeId);
            $collection->setAddedDate($date);
            $collection->setQty($qty);
            $collection->save();
            $itemID = $collection->getItemId();
            //Save data

            foreach ($optionArrayData as $value) {
                //Save data
                $itemsOpt = $this->_saveforlatteritemoptionFactory->create();
                $collectionOpt = $itemsOpt;
                $collectionOpt->setItemId($itemID);
                $collectionOpt->setProductId($value['product_id']);
                $collectionOpt->setCode($value['code']);
                $collectionOpt->setValue($value['value']);
                $collectionOpt->save();
                //Save data
            }
            /**********************************************/

            $response = $this->resultFactory
                ->create(\Magento\Framework\Controller\ResultFactory::TYPE_JSON)
                ->setData([
                    'uenc' => $uenc, 
                    'product' => $product,
                    'selected_configurable_option' => $selected_configurable_option,
                    'related_product' => $related_product,
                    'super_attribute' => $super_attribute,
                    'qty' => $qty,
                    'itemId'=>$itemID
            ]);
            return $response;
        }
        

        
    }
  
} 